version: '3'

services:

  caretaker-server:
    container_name: caretaker_cloud_kernel_cost_server
    image: rubiklabs/caretaker-cloud-kernel-cost:0.1.0
    entrypoint:
      - ./run_server.sh
    environment:
      - CARETAKER=True
      - CARETAKER_IDENTITY
      - CARETAKER_DEBUG=True
      - DATABASE_SERVICE_NAME=POSTGRES_SQL
      - DATABASE_ENGINE=postgresql
      - DATABASE_NAME=${DATABASE_NAME-postgres}
      - POSTGRES_SQL_SERVICE_HOST=db
      - POSTGRES_SQL_SERVICE_PORT=5432
      - DATABASE_USER=${DATABASE_USER-postgres}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD-postgres}
      - KOKU_SOURCES_CLIENT_HOST=${KOKU_SOURCES_CLIENT_HOST-sources-client}
      - KOKU_SOURCES_CLIENT_PORT=${KOKU_SOURCES_CLIENT_PORT-9000}
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - DJANGO_READ_DOT_ENV_FILE=True
      - DEVELOPMENT=False
      - RBAC_SERVICE_HOST=${RBAC_SERVICE_HOST-rbac-server}
      - RBAC_SERVICE_PORT=${RBAC_SERVICE_PORT-9000}
      - RBAC_SERVICE_PATH=${RBAC_SERVICE_PATH-/r/insights/platform/rbac/v1/access/}
      - REDIS_HOST=${REDIS_HOST-redis}
      - REDIS_PORT=${REDIS_PORT-6379}
      - RABBITMQ_HOST=${RABBITMQ_HOST-koku-rabbit}
      - RABBITMQ_PORT=5672
      - USE_RABBIT=${USE_RABBIT-False}
      - RBAC_CACHE_TTL
      - PROMETHEUS_MULTIPROC_DIR=/tmp
      - API_PATH_PREFIX=${API_PATH_PREFIX-/api/cost-management}
      - GOOGLE_APPLICATION_CREDENTIALS=${GOOGLE_APPLICATION_CREDENTIALS-}
      - DEMO_ACCOUNTS
      - ACCOUNT_ENHANCED_METRICS=${ACCOUNT_ENHANCED_METRICS-False}
      - MASU_DATE_OVERRIDE
      - RUN_GUNICORN=${RUN_GUNICORN-}
      - POD_CPU_LIMIT=${POD_CPU_LIMIT-1}
      - GUNICORN_THREADS=${GUNICORN_THREADS-False}
      - ENABLE_TRINO_SOURCES
      - ENABLE_TRINO_ACCOUNTS
      - ENABLE_TRINO_SOURCE_TYPE
      - RETAIN_NUM_MONTHS=${RETAIN_NUM_MONTHS-3}
      - CURRENCY_URL=${CURRENCY_URL}
    privileged: true
    ports:
      - 8000:8000
      - 8001:9000
    depends_on:
      - db
      - redis
    volumes:
      - './testing:/testing'

  caretaker-worker:
    working_dir: /opt/app-root/src/koku
    container_name: caretaker_cloud_kernel_cost_worker
    hostname: caretaker-worker-1
    image: rubiklabs/caretaker-cloud-kernel-cost:0.1.0
    entrypoint: ['celery', '-A', 'koku', 'worker', '-l', 'info', '-Q', 'celery,download,ocp,priority,summary,cost_model,refresh']
    environment:
      - CARETAKER=True
      - CARETAKER_IDENTITY
      - CARETAKER_DEBUG=True
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - DATABASE_SERVICE_NAME=POSTGRES_SQL
      - DATABASE_ENGINE=postgresql
      - DATABASE_NAME=${DATABASE_NAME-postgres}
      - POSTGRES_SQL_SERVICE_HOST=db
      - POSTGRES_SQL_SERVICE_PORT=5432
      - DATABASE_USER=${DATABASE_USER-postgres}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD-postgres}
      - REDIS_HOST=${REDIS_HOST-redis}
      - REDIS_PORT=${REDIS_PORT-6379}
      - RABBITMQ_HOST=${RABBITMQ_HOST-koku-rabbit}
      - RABBITMQ_PORT=5672
      - USE_RABBIT=${USE_RABBIT-False}
      - DEVELOPMENT=${DEVELOPMENT-True}
      - CELERY_LOG_LEVEL=${CELERY_LOG_LEVEL-INFO}
      - DJANGO_LOG_LEVEL=${DJANGO_LOG_LEVEL-INFO}
      - UNLEASH_LOG_LEVEL=${UNLEASH_LOG_LEVEL-WARNING}
      - DJANGO_SETTINGS_MODULE=koku.settings
      - PROMETHEUS_MULTIPROC_DIR=/tmp
      - PROMETHEUS_PUSHGATEWAY=${PROMETHEUS_PUSHGATEWAY-pushgateway:9091}
      - ENABLE_S3_ARCHIVING=${ENABLE_S3_ARCHIVING-False}
      - ENABLE_PARQUET_PROCESSING=${ENABLE_PARQUET_PROCESSING-False}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME-koku-bucket}
      - S3_BUCKET_PATH=${S3_BUCKET_PATH-data_archive}
      - S3_ENDPOINT
      - S3_ACCESS_KEY
      - S3_SECRET
      - PVC_DIR=${PVC_DIR-/testing/pvc_dir}
      - GOOGLE_APPLICATION_CREDENTIALS=${GOOGLE_APPLICATION_CREDENTIALS-}
      - KOKU_CELERY_ENABLE_SENTRY
      - KOKU_CELERY_SENTRY_DSN
      - KOKU_SENTRY_ENVIRONMENT
      - DEMO_ACCOUNTS
      - INITIAL_INGEST_OVERRIDE=${INITIAL_INGEST_OVERRIDE-False}
      - INITIAL_INGEST_NUM_MONTHS=${INITIAL_INGEST_NUM_MONTHS-2}
      - AUTO_DATA_INGEST=${AUTO_DATA_INGEST-True}
      - REPORT_PROCESSING_BATCH_SIZE=${REPORT_PROCESSING_BATCH_SIZE-100000}
      - PRESTO_HOST=${PRESTO_HOST-trino}
      - PRESTO_PORT=${PRESTO_PORT-8080}
      - SOURCES_API_HOST=${SOURCES_API_HOST-sources-server}
      - SOURCES_API_PORT=${SOURCES_API_PORT-3000}
      - DATE_OVERRIDE
      - ENABLE_TRINO_SOURCES
      - ENABLE_TRINO_ACCOUNTS
      - ENABLE_TRINO_SOURCE_TYPE
      - TRINO_DATE_STEP=${TRINO_DATE_STEP-31}
      - MAX_CELERY_TASKS_PER_WORKER=${MAX_CELERY_TASKS_PER_WORKER-10}
      - RETAIN_NUM_MONTHS=${RETAIN_NUM_MONTHS-3}
    privileged: true
    ports:
      - 6001-6020:9000
    depends_on:
        - db
        - redis
        - caretaker-server
    volumes:
      - './testing:/testing'

### Utilities

  db:
    container_name: caretaker_cloud_kernel_cost_db
    image: postgres:12
    environment:
    - POSTGRES_DB=${DATABASE_NAME-postgres}
    - POSTGRES_USER=${DATABASE_USER-postgres}
    - POSTGRES_PASSWORD=${DATABASE_PASSWORD-postgres}
    - _PG_CREATE_DATABASES=${DATABASE_NAME-postgres}|${DATABASE_USER-postgres},unleash|${DATABASE_USER-postgres}
    ports:
      - 15432:5432
    volumes:
      - ./pg_data:/var/lib/${DATABASE_DATA_DIR-postgresql}/data
      - ./pg_init:/docker-entrypoint-initdb.d
    command:
      - postgres
      - -c
      - ssl=on
      - -c
      - ssl_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem
      - -c
      - ssl_key_file=/etc/ssl/private/ssl-cert-snakeoil.key
      - -c
      - max_connections=1710
      - -c
      - shared_preload_libraries=pg_stat_statements
      - -c
      - autovacuum_max_workers=8
      - -c
      - autovacuum_vacuum_cost_limit=4800
      - -c
      - autovacuum_vacuum_cost_delay=10
      - -c
      - max_locks_per_transaction=72
      - -c
      - pg_stat_statements.max=2000
      - -c
      - pg_stat_statements.save=off
      - -c
      - pg_stat_statements.track_utility=off
      - -c
      - track_activity_query_size=2048
      - -c
      - track_functions=pl
      - -c
      - log_min_error_statement=error
      - -c
      - log_min_duration_statement=2000
      - -c
      - logging_collector=on
      - -c
      - "log_line_prefix=%t:%r:%u@%d:[%p]:"
      - -c
      - log_statement=mod

  redis:
    container_name: caretaker_cloud_kernel_cost_redis
    image: redis:5.0.4
    ports:
      - 6379:6379
